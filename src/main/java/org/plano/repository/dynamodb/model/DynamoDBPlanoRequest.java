package org.plano.repository.dynamodb.model;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Date;
import java.util.Objects;

/**
 * DynamoDBPlanoRequest POJO.
 */
@DynamoDBTable(tableName = "PlanoRequests")
public class DynamoDBPlanoRequest {
    private static final Logger LOG = LoggerFactory.getLogger(DynamoDBPlanoRequest.class);

    private String requestID;
    private DynamoDBHttpRequest dynamoDBHttpRequest;
    private Date executionTime;
    private DynamoDBSchedulePolicy dynamoDBSchedulePolicy;

    private Date lockExpireTime;

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey(attributeName = "RequestID")
    public String getRequestID() {
        return requestID;
    }

    public void setRequestID(String requestID) {
        this.requestID = requestID;
    }

    @DynamoDBTypeConvertedJson
    public DynamoDBHttpRequest getDynamoDBHttpRequest() {
        return dynamoDBHttpRequest;
    }

    public void setDynamoDBHttpRequest(DynamoDBHttpRequest dynamoDBHttpRequest) {
        this.dynamoDBHttpRequest = dynamoDBHttpRequest;
    }

    @DynamoDBTypeConvertedTimestamp()
    @DynamoDBAttribute(attributeName = "ExecutionTime")
    public Date getExecutionTime() {
        return executionTime;
    }

    public void setExecutionTime(Date executionTime) {
        this.executionTime = executionTime;
    }

    @DynamoDBTypeConvertedJson
    public DynamoDBSchedulePolicy getDynamoDBSchedulePolicy() {
        return dynamoDBSchedulePolicy;
    }

    public void setDynamoDBSchedulePolicy(DynamoDBSchedulePolicy dynamoDBSchedulePolicy) {
        this.dynamoDBSchedulePolicy = dynamoDBSchedulePolicy;
    }

    @DynamoDBTypeConvertedTimestamp
    @DynamoDBAttribute(attributeName = "LockExpireTime", mappedBy = "N")
    public Date getLockExpireTime() {
        return lockExpireTime;
    }

    public void setLockExpireTime(Date lockExpireTime) {
        this.lockExpireTime = lockExpireTime;
    }

    @Override
    public String toString() {
        String s = null;
        ObjectMapper mapper = new ObjectMapper();
        try {
            s = mapper.writeValueAsString(this);
        } catch (JsonProcessingException e) {
            LOG.error("Failed to marshall object to json. Cause is {}", e);
        }

        return s;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof DynamoDBPlanoRequest)) {
            return false;
        }
        DynamoDBPlanoRequest dynamoDBPlanoRequest = (DynamoDBPlanoRequest)o;

        return Objects.equals(requestID, dynamoDBPlanoRequest.getRequestID()) &&
                Objects.equals(dynamoDBHttpRequest, dynamoDBPlanoRequest.getDynamoDBHttpRequest()) &&
                Objects.equals(executionTime, dynamoDBPlanoRequest.getExecutionTime()) &&
                Objects.equals(dynamoDBSchedulePolicy, dynamoDBPlanoRequest.getDynamoDBSchedulePolicy());
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + (requestID == null ? 0 : requestID.hashCode());
        result = 31 * result + (dynamoDBHttpRequest == null ? 0 : dynamoDBHttpRequest.hashCode());
        result = 31 * result + (executionTime == null ? 0 : executionTime.hashCode());
        result = 31 * result + (dynamoDBSchedulePolicy == null ? 0 : dynamoDBSchedulePolicy.hashCode());

        return result;
    }
}
